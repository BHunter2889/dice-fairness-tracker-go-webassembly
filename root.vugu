<div class="root">
	<dice-sides-grid :sides='state.NumSides' :rows='state.NumRows'></dice-sides-grid>
	<div class="container">
		<span class="" vg-html='fmt.Sprint(*data.TotalRollCount, " | ")'></span>
		<span class="" vg-html='fmt.Sprint(state.DieBalanceComputationValues.DieConstants.MinNumberOfRolls, " | ")'></span>
		<span class="" vg-if='state.IsMinNumRollsMet' vg-html='fmt.Sprint(state.DieBalanceComputationValues.BalanceThreshold, " | ")'></span>
		<span class="" vg-if='state.IsMinNumRollsMet' vg-html='fmt.Sprint(state.DieBalanceComputationValues.ExpectedRollsPerSide, " | ")'></span>
		<span class="" vg-if='state.IsMinNumRollsMet' vg-html='fmt.Sprint(state.DieBalanceComputationValues.SumSquaredError, " | ")'></span>
		<span class="" vg-if='state.IsMinNumRollsMet' vg-html='fmt.Sprint(state.DieBalanceComputationValues.IsBalanced)'></span>
	</div>
	<div vg-for='i := 0; i < 15; i++' class="firefly"></div> // TODO: Figure out how to put this above root, or what root currently is.
</div>

<style>
	.root {
		/*background: rgb(32,56,42) radial-gradient(circle, rgba(32,56,42,0.4) 1%, rgba(33,31,31,0.5) 100%);*/
		height: 100%;
		width: 100%;
		margin: 0;
		padding: 0;
		position: absolute;
	}
</style>

<script type="application/x-go">
	type RootData struct {
		NumSides             int `default:"20"`
		NumRows              int `default:"5"`
		TotalRollCount       *int `default:"0"`
		MinNumberOfRolls 	 int
		IsMinNumRollsMet 	 bool `default:"false"`
		BalanceThreshold     float64 `default:"0.0"`   // Threshold for the SumSquaredError.
		ExpectedRollsPerSide float64 `default:"0.0"`   // `TotalRollCount/NumberOfSides`
		SumSquaredError      float64 `default:"0.0"`   // Total of all options SquaredError different from expected roll count. aka 'SSE'
		IsBalanced           bool    `default:"false"` // SSE <= BalanceThreshold
	}

	func (comp *Root) NewData(props vugu.Props) (interface{}, error) {

		ret := &RootData{
			//NumSides: state
			//NumRows: props["NumRows"].(int),
			TotalRollCount: &state.TotalRollCount,
			//MinNumberOfRolls: props["MinNumberOfRolls"].(int),
			//IsMinNumRollsMet: props["IsMinNumRollsMet"].(bool),
			//IsMinNumRollsMet:isMinRollsMet,
			//BalanceThreshold: props["BalanceThreshold"].(float64),
			//ExpectedRollsPerSide: props["ExpectedRollsPerSide"].(float64),
			//SumSquaredError: props["SumSquaredError"].(float64),
			//IsBalanced: props["IsBalanced"].(bool),
		}
		return ret, nil
	}
</script>