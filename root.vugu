<div class="root">
	<dice-sides-grid :sides='state.NumSides' :rows='state.NumRows'></dice-sides-grid>
	<div class="stat-score-block-row">
		<div class="stat-score-block" vg-html='"Total Rolls:"'>
			<div class="stat-score-block-data" vg-html='fmt.Sprint(*data.TotalRollCount)'></div>
		</div>
		<div class="stat-score-block" vg-html='"Min # Rolls: "'>
			<div class="stat-score-block-data" vg-html='fmt.Sprint(state.DieBalanceComputationValues.DieConstants.MinNumberOfRolls)'></div>
		</div>
		<div class="stat-score-block" vg-if='!state.IsMinNumRollsMet' vg-html='"Balance Threshold: "'>
			<div class="stat-score-block-data" vg-if='!state.IsMinNumRollsMet' vg-html='fmt.Sprint("Min # Rolls Not Met")'></div>
		</div>
		<div class="stat-score-block" vg-if='state.IsMinNumRollsMet' vg-html='"Balance Threshold: "'>
			<div class="stat-score-block-data" vg-if='state.IsMinNumRollsMet' vg-html='fmt.Sprint(state.DieBalanceComputationValues.BalanceThreshold)'></div>
		</div>
		<div class="stat-score-block" vg-if='!state.IsMinNumRollsMet' vg-html='"Expected Rolls/Side: "'>
			<div class="stat-score-block-data" vg-if='!state.IsMinNumRollsMet' vg-html='fmt.Sprint("Min # Rolls Not Met")'></div>
		</div>
		<div class="stat-score-block" vg-if='state.IsMinNumRollsMet' vg-html='"Expected Rolls/Side: "'>
			<div class="stat-score-block-data" vg-if='!state.IsMinNumRollsMet' vg-html='fmt.Sprint(state.DieBalanceComputationValues.ExpectedRollsPerSide)'></div>
		</div>
		<div class="stat-score-block" vg-if='!state.IsMinNumRollsMet' vg-html='"Sum Squared Error: "'>
			<div class="stat-score-block-data" vg-if='!state.IsMinNumRollsMet' vg-html='fmt.Sprint("Min # Rolls Not Met")'></div>
		</div>
		<div class="stat-score-block" vg-if='state.IsMinNumRollsMet' vg-html='"Sum Squared Error: "'>
			<div class="stat-score-block-data" vg-if='!state.IsMinNumRollsMet' vg-html='fmt.Sprint(state.DieBalanceComputationValues.SumSquaredError)'></div>
		</div>
		<div class="stat-score-block" vg-if='!state.IsMinNumRollsMet' vg-html='"Balanced: "'>
			<div class="stat-score-block-data" vg-if='!state.IsMinNumRollsMet' vg-html='fmt.Sprint("Min # Rolls Not Met")'></div>
		</div>
		<div class="stat-score-block" vg-if='state.IsMinNumRollsMet' vg-html='"Balanced: "'>
			<div class="stat-score-block-data" vg-if='!state.IsMinNumRollsMet' vg-html='fmt.Sprint(state.DieBalanceComputationValues.IsBalanced)'></div>
		</div>
	</div>
	<div vg-for='i := 0; i < 15; i++' class="firefly"></div>
</div>

<style>
	div.root {
		/*background: rgb(32,56,42) radial-gradient(circle, rgba(32,56,42,0.4) 1%, rgba(33,31,31,0.5) 100%);*/
		/*background: inherit;*/
		width: 100%;
		height: 100%;
		/*position: relative;*/
		overflow: hidden;
		background-size: cover;
		/*margin: 50px;*/
		/*max-width: 100%;*/
		/*max-height: 100%;*/
		position: absolute;

		/* TODO: Maybe? */
		 /*display: flex;*/
		 /*justify-content: center;*/
		 /*align-items: center;*/
		 /*flex-flow: column;*/
		display: grid;
		grid-template-rows: 80% 1fr;
		place-items: center;
		/*grid-template-rows: [counter-grid-start] 80% [counter-grid-end stat-row-start] 1fr [stat-row-end];*/
	}

	div.root:before {
		content: close-quote;
		background: inherit;
		position: absolute;
		left: -10px;
		right: -10px;
		top: -10px;
		bottom: -10px;
		box-shadow: inset 0 0 0 2000px rgba(255,255,255,0.1);
		filter: blur(1px);
		/*max-width: 100%;*/
		/*max-height: 100%;*/
	}

	.stat-score-block {
		position: relative;
		width: 100%;
		height: 100%;
		display: flex;
		flex-direction: column;
		justify-content: center;
		/*overflow-x: auto;*/
		/*width: 81px;*/
		/*height: 95px;*/
		background: 50% transparent url(https://www.dndbeyond.com/Content/Skins/Waterdeep/images/character-sheet/content-frames/ac.svg) no-repeat;
		background-size: contain;
		text-align: center;
		color: #838383;
		font-size: large;
		line-height: 1;
	}

	.stat-score-block-data {
		font-weight: 700;
		font-size: 130%;
		letter-spacing: -1px;
		color: black;
	}

	.stat-score-block-row {
		/*width: 100%;*/
		/*!*height: 20%;*!*/
		/*display: flex;*/
		width: 100%;
		height: 100%;
		display: grid;
		justify-content: space-around;
		position: absolute;
		grid-row-start: 2;
		grid-row-end: 3;
		grid-template-rows: 1fr;
		grid-template-columns: repeat(6, 1fr);
		/*flex-grow: 1;*/
	}



</style>

<script type="application/x-go">
	type RootData struct {
		NumSides             int `default:"20"`
		NumRows              int `default:"5"`
		TotalRollCount       *int `default:"0"`
		MinNumberOfRolls 	 int
		IsMinNumRollsMet 	 bool `default:"false"`
		BalanceThreshold     float64 `default:"0.0"`   // Threshold for the SumSquaredError.
		ExpectedRollsPerSide float64 `default:"0.0"`   // `TotalRollCount/NumberOfSides`
		SumSquaredError      float64 `default:"0.0"`   // Total of all options SquaredError different from expected roll count. aka 'SSE'
		IsBalanced           bool    `default:"false"` // SSE <= BalanceThreshold
	}

	func (comp *Root) NewData(props vugu.Props) (interface{}, error) {

		ret := &RootData{
			//NumSides: state
			//NumRows: props["NumRows"].(int),
			TotalRollCount: &state.TotalRollCount,
			//MinNumberOfRolls: props["MinNumberOfRolls"].(int),
			//IsMinNumRollsMet: props["IsMinNumRollsMet"].(bool),
			//IsMinNumRollsMet:isMinRollsMet,
			//BalanceThreshold: props["BalanceThreshold"].(float64),
			//ExpectedRollsPerSide: props["ExpectedRollsPerSide"].(float64),
			//SumSquaredError: props["SumSquaredError"].(float64),
			//IsBalanced: props["IsBalanced"].(bool),
		}
		return ret, nil
	}
</script>